{"ast":null,"code":"import orderStatistic from \"@/services/data_import\";\nexport default {\n  name: \"CreateShift\",\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      listProf: null,\n      selectedProf: null,\n      selectedTime: 0,\n      selectedDateStart: \"\",\n      selectedDateEnd: \"\",\n      selectedSchedule: \"\",\n      countDay: null // Variable to store count_day\n    };\n  },\n  methods: {\n    getProfessions() {\n      orderStatistic.getProfession().then(response => {\n        this.listProf = response.data;\n        console.log(response.data);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    getCountDay() {\n      orderStatistic.getCountDay() // Assuming this is the method to get count_day\n      .then(response => {\n        this.countDay = response.data.count_day;\n        console.log(\"Count Day:\", this.countDay);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    formShift() {\n      // Calculate the difference between selectedDateEnd and selectedDateStart\n      const startDate = new Date(this.selectedDateStart);\n      const endDate = new Date(this.selectedDateEnd);\n      const differenceInMs = endDate.getTime() - startDate.getTime();\n      const daysDifference = Math.round(differenceInMs / (24 * 60 * 60 * 1000));\n      console.log(\"Error creating shifts:\", daysDifference);\n      // Call the createShifts function with selected values\n\n      // Check if countDay is not null before calling createShifts\n      if (this.countDay !== null) {\n        orderStatistic.createShifts(this.selectedProf, this.countDay, this.selectedDateStart, daysDifference).then(response => {\n          console.log(\"Shifts created successfully:\", response);\n        }).catch(error => {\n          console.error(\"Error creating shifts:\", error);\n        });\n      } else {\n        console.error(\"Count Day is not available\");\n      }\n    }\n  },\n  mounted() {\n    this.getProfessions();\n    this.getCountDay(); // Fetch count_day when the component is mounted\n  }\n};","map":{"version":3,"names":["orderStatistic","name","props","msg","String","data","listProf","selectedProf","selectedTime","selectedDateStart","selectedDateEnd","selectedSchedule","countDay","methods","getProfessions","getProfession","then","response","console","log","catch","e","getCountDay","count_day","formShift","startDate","Date","endDate","differenceInMs","getTime","daysDifference","Math","round","createShifts","error","mounted"],"sources":["V:\\web\\shiftfront\\src\\components\\CreateShift.vue"],"sourcesContent":["<!--CreateShift.vue-->\r\n<template>\r\n  <div class=\"container\">\r\n    <h1 class=\"title\">Создание смены</h1>\r\n    <div class=\"form-section\">\r\n      <p class=\"label\">Выберите профессию</p>\r\n      <select\r\n        name=\"combo_profession\"\r\n        v-model=\"selectedProf\"\r\n        class=\"select-input\"\r\n      >\r\n        <option value=\"\" disabled selected>Выберите профессию</option>\r\n        <option\r\n          v-for=\"profes in listProf\"\r\n          :key=\"profes.profession_id\"\r\n          :value=\"profes.profession_id\"\r\n        >\r\n          {{ profes.profession_name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    <div class=\"form-section\">\r\n      <p class=\"label\">Количество рабочих часов за смену</p>\r\n      <input\r\n        type=\"number\"\r\n        v-model=\"selectedTime\"\r\n        class=\"input-field\"\r\n        placeholder=\"Select Date\"\r\n      />\r\n    </div>\r\n    <div class=\"form-section\">\r\n      <p class=\"label\">Рабочий период с:</p>\r\n      <input\r\n        type=\"date\"\r\n        v-model=\"selectedDateStart\"\r\n        class=\"input-field\"\r\n        placeholder=\"Select date start\"\r\n      />\r\n      <p class=\"label\">По:</p>\r\n      <input\r\n        type=\"date\"\r\n        v-model=\"selectedDateEnd\"\r\n        class=\"input-field\"\r\n        placeholder=\"Select Date end\"\r\n      />\r\n    </div>\r\n    <div class=\"form-section\">\r\n      <p class=\"label\">Рабочий график (введите через \"/\")</p>\r\n      <input\r\n        type=\"text\"\r\n        v-model=\"selectedSchedule\"\r\n        class=\"input-field\"\r\n        placeholder=\"Enter schedule\"\r\n      />\r\n    </div>\r\n    <button @click=\"formShift\" class=\"green-button\">Сформировать смены</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport orderStatistic from \"@/services/data_import\";\r\nexport default {\r\n  name: \"CreateShift\",\r\n  props: {\r\n    msg: String,\r\n  },\r\n  data() {\r\n    return {\r\n      listProf: null,\r\n      selectedProf: null,\r\n      selectedTime: 0,\r\n      selectedDateStart: \"\",\r\n      selectedDateEnd: \"\",\r\n      selectedSchedule: \"\",\r\n      countDay: null, // Variable to store count_day\r\n    };\r\n  },\r\n  methods: {\r\n    getProfessions() {\r\n      orderStatistic\r\n        .getProfession()\r\n        .then((response) => {\r\n          this.listProf = response.data;\r\n          console.log(response.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n    getCountDay() {\r\n      orderStatistic\r\n        .getCountDay() // Assuming this is the method to get count_day\r\n        .then((response) => {\r\n          this.countDay = response.data.count_day;\r\n          console.log(\"Count Day:\", this.countDay);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n    formShift() {\r\n      // Calculate the difference between selectedDateEnd and selectedDateStart\r\n      const startDate = new Date(this.selectedDateStart);\r\n      const endDate = new Date(this.selectedDateEnd);\r\n      const differenceInMs = endDate.getTime() - startDate.getTime();\r\n      const daysDifference = Math.round(differenceInMs / (24 * 60 * 60 * 1000));\r\n      console.log(\"Error creating shifts:\", daysDifference);\r\n      // Call the createShifts function with selected values\r\n\r\n      // Check if countDay is not null before calling createShifts\r\n      if (this.countDay !== null) {\r\n        orderStatistic\r\n          .createShifts(\r\n            this.selectedProf,\r\n            this.countDay,\r\n            this.selectedDateStart,\r\n            daysDifference\r\n          )\r\n          .then((response) => {\r\n            console.log(\"Shifts created successfully:\", response);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error creating shifts:\", error);\r\n          });\r\n      } else {\r\n        console.error(\"Count Day is not available\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getProfessions();\r\n    this.getCountDay(); // Fetch count_day when the component is mounted\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.label {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.select-input,\r\n.input-field {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.green-button {\r\n  background-color: #34c759;\r\n  color: #fff;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.green-button:hover {\r\n  background-color: #2ecc71;\r\n}\r\n</style>\r\n"],"mappings":"AA4DA,OAAOA,cAAa,MAAO,wBAAwB;AACnD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,GAAG,EAAEC;EACP,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBC,YAAY,EAAE,CAAC;MACfC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,gBAAgB,EAAE,EAAE;MACpBC,QAAQ,EAAE,IAAI,CAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACfd,cAAa,CACVe,aAAa,CAAC,EACdC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACX,QAAO,GAAIW,QAAQ,CAACZ,IAAI;QAC7Ba,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACZ,IAAI,CAAC;MAC5B,CAAC,EACAe,KAAK,CAAEC,CAAC,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;MAChB,CAAC,CAAC;IACN,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZtB,cAAa,CACVsB,WAAW,CAAC,EAAE;MAAA,CACdN,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACL,QAAO,GAAIK,QAAQ,CAACZ,IAAI,CAACkB,SAAS;QACvCL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAACP,QAAQ,CAAC;MAC1C,CAAC,EACAQ,KAAK,CAAEC,CAAC,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;MAChB,CAAC,CAAC;IACN,CAAC;IACDG,SAASA,CAAA,EAAG;MACV;MACA,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,IAAI,CAACjB,iBAAiB,CAAC;MAClD,MAAMkB,OAAM,GAAI,IAAID,IAAI,CAAC,IAAI,CAAChB,eAAe,CAAC;MAC9C,MAAMkB,cAAa,GAAID,OAAO,CAACE,OAAO,CAAC,IAAIJ,SAAS,CAACI,OAAO,CAAC,CAAC;MAC9D,MAAMC,cAAa,GAAIC,IAAI,CAACC,KAAK,CAACJ,cAAa,IAAK,EAAC,GAAI,EAAC,GAAI,EAAC,GAAI,IAAI,CAAC,CAAC;MACzEV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,cAAc,CAAC;MACrD;;MAEA;MACA,IAAI,IAAI,CAAClB,QAAO,KAAM,IAAI,EAAE;QAC1BZ,cAAa,CACViC,YAAY,CACX,IAAI,CAAC1B,YAAY,EACjB,IAAI,CAACK,QAAQ,EACb,IAAI,CAACH,iBAAiB,EACtBqB,cACF,EACCd,IAAI,CAAEC,QAAQ,IAAK;UAClBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;QACvD,CAAC,EACAG,KAAK,CAAEc,KAAK,IAAK;UAChBhB,OAAO,CAACgB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,CAAC;MACN,OAAO;QACLhB,OAAO,CAACgB,KAAK,CAAC,4BAA4B,CAAC;MAC7C;IACF;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACrB,cAAc,CAAC,CAAC;IACrB,IAAI,CAACQ,WAAW,CAAC,CAAC,EAAE;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}