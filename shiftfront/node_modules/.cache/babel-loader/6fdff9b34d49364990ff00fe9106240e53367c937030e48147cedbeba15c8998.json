{"ast":null,"code":"import orderStatistic from \"@/services/data_import\";\nexport default {\n  name: \"TheFormuls\",\n  data() {\n    return {\n      listTypeOrder: null,\n      listProf: null,\n      selectedProf: null,\n      selectedType: null,\n      formulValue: \"\",\n      errors: null\n    };\n  },\n  mounted() {\n    this.getOrderTypes();\n    this.getProfessions();\n  },\n  methods: {\n    getOrderTypes() {\n      orderStatistic.getOrderType().then(response => {\n        this.listTypeOrder = response.data;\n        console.log(response.data);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    getProfessions() {\n      orderStatistic.getProfession().then(response => {\n        this.listProf = response.data;\n        console.log(response.data);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    insertFormul() {\n      if (!this.selectedProf || !this.formulValue) {\n        this.errors = {\n          profession_id: [\"Please select a profession.\"],\n          formula: [\"Please enter a formula.\"]\n        };\n        return;\n      }\n      orderStatistic.getIdProfession(this.selectedProf).then(response => {\n        let id_prof = response.data;\n        orderStatistic.insertFormule(id_prof, this.formulValue).then(response => {\n          console.log(\"Formula created successfully:\", response);\n          this.errors = null;\n        }).catch(error => {\n          if (error.response) {\n            this.errors = error.response.data.errors;\n            console.error(\"Validation Error:\", error.response.data.errors);\n          } else {\n            console.error(\"Error:\", error);\n          }\n        });\n      }).catch(error => {\n        console.error(\"Error getting profession ID:\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["orderStatistic","name","data","listTypeOrder","listProf","selectedProf","selectedType","formulValue","errors","mounted","getOrderTypes","getProfessions","methods","getOrderType","then","response","console","log","catch","e","getProfession","insertFormul","profession_id","formula","getIdProfession","id_prof","insertFormule","error"],"sources":["V:\\web\\shiftfront\\src\\components\\Formuls.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Составить формулу</h1>\r\n    <div>\r\n      <p>Выберите профессию</p>\r\n      <select name=\"combo_profession\" v-model=\"selectedProf\">\r\n        <option value=\"\" disabled selected>Выберите профессию</option>\r\n        <option\r\n          v-for=\"profes in listProf\"\r\n          :key=\"profes.profession_id\"\r\n          :value=\"profes.profession_id\"\r\n        >\r\n          {{ profes.profession_name }}\r\n        </option>\r\n      </select>\r\n      <p v-if=\"errors && errors.profession_id\">{{ errors.profession_id }}</p>\r\n      <p>Выберите тип зказа для профессии</p>\r\n      <select\r\n        name=\"combo_order\"\r\n        v-model=\"selectedType\"\r\n        placeholder=\"X = количество заказов с данным типом\"\r\n      >\r\n        <option value=\"\" disabled selected>\r\n          X = количество заказов с данным типом\r\n        </option>\r\n        <option\r\n          v-for=\"order_type in listTypeOrder\"\r\n          :key=\"order_type.order_type_id\"\r\n          :value=\"order_type.order_type_id\"\r\n        >\r\n          {{ order_type.order_type_name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    <div>\r\n      <p>Введите формулу</p>\r\n      <input type=\"text\" v-model=\"formulValue\" />\r\n      <p v-if=\"errors && errors.formula\">{{ errors.formula }}</p>\r\n    </div>\r\n    <p><button @click=\"insertFormul\">Создать формулу</button></p>\r\n    <div v-if=\"errors\">\r\n      <ul>\r\n        <li v-for=\"(error, key) in errors\" :key=\"key\">{{ error }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport orderStatistic from \"@/services/data_import\";\r\nexport default {\r\n  name: \"TheFormuls\",\r\n  data() {\r\n    return {\r\n      listTypeOrder: null,\r\n      listProf: null,\r\n      selectedProf: null,\r\n      selectedType: null,\r\n      formulValue: \"\",\r\n      errors: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getOrderTypes();\r\n    this.getProfessions();\r\n  },\r\n  methods: {\r\n    getOrderTypes() {\r\n      orderStatistic\r\n        .getOrderType()\r\n        .then((response) => {\r\n          this.listTypeOrder = response.data;\r\n          console.log(response.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n    getProfessions() {\r\n      orderStatistic\r\n        .getProfession()\r\n        .then((response) => {\r\n          this.listProf = response.data;\r\n          console.log(response.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n    insertFormul() {\r\n      if (!this.selectedProf || !this.formulValue) {\r\n        this.errors = {\r\n          profession_id: [\"Please select a profession.\"],\r\n          formula: [\"Please enter a formula.\"],\r\n        };\r\n        return;\r\n      }\r\n      orderStatistic\r\n        .getIdProfession(this.selectedProf)\r\n        .then((response) => {\r\n          let id_prof = response.data;\r\n          orderStatistic\r\n            .insertFormule(id_prof, this.formulValue)\r\n            .then((response) => {\r\n              console.log(\"Formula created successfully:\", response);\r\n              this.errors = null;\r\n            })\r\n            .catch((error) => {\r\n              if (error.response) {\r\n                this.errors = error.response.data.errors;\r\n                console.error(\"Validation Error:\", error.response.data.errors);\r\n              } else {\r\n                console.error(\"Error:\", error);\r\n              }\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error getting profession ID:\", error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AAiDA,OAAOA,cAAa,MAAO,wBAAwB;AACnD,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,IAAI;MACnBC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBC,YAAY,EAAE,IAAI;MAClBC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPF,aAAaA,CAAA,EAAG;MACdV,cAAa,CACVa,YAAY,CAAC,EACbC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACZ,aAAY,GAAIY,QAAQ,CAACb,IAAI;QAClCc,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACb,IAAI,CAAC;MAC5B,CAAC,EACAgB,KAAK,CAAEC,CAAC,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;MAChB,CAAC,CAAC;IACN,CAAC;IACDR,cAAcA,CAAA,EAAG;MACfX,cAAa,CACVoB,aAAa,CAAC,EACdN,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACX,QAAO,GAAIW,QAAQ,CAACb,IAAI;QAC7Bc,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACb,IAAI,CAAC;MAC5B,CAAC,EACAgB,KAAK,CAAEC,CAAC,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;MAChB,CAAC,CAAC;IACN,CAAC;IACDE,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAAChB,YAAW,IAAK,CAAC,IAAI,CAACE,WAAW,EAAE;QAC3C,IAAI,CAACC,MAAK,GAAI;UACZc,aAAa,EAAE,CAAC,6BAA6B,CAAC;UAC9CC,OAAO,EAAE,CAAC,yBAAyB;QACrC,CAAC;QACD;MACF;MACAvB,cAAa,CACVwB,eAAe,CAAC,IAAI,CAACnB,YAAY,EACjCS,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIU,OAAM,GAAIV,QAAQ,CAACb,IAAI;QAC3BF,cAAa,CACV0B,aAAa,CAACD,OAAO,EAAE,IAAI,CAAClB,WAAW,EACvCO,IAAI,CAAEC,QAAQ,IAAK;UAClBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;UACtD,IAAI,CAACP,MAAK,GAAI,IAAI;QACpB,CAAC,EACAU,KAAK,CAAES,KAAK,IAAK;UAChB,IAAIA,KAAK,CAACZ,QAAQ,EAAE;YAClB,IAAI,CAACP,MAAK,GAAImB,KAAK,CAACZ,QAAQ,CAACb,IAAI,CAACM,MAAM;YACxCQ,OAAO,CAACW,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACZ,QAAQ,CAACb,IAAI,CAACM,MAAM,CAAC;UAChE,OAAO;YACLQ,OAAO,CAACW,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;UAChC;QACF,CAAC,CAAC;MACN,CAAC,EACAT,KAAK,CAAES,KAAK,IAAK;QAChBX,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}